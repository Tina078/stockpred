'''
Filename        : stocks.py
Author          : Aditya Murray
Date            : 5th July 2016
Description     : Get a list of all the stock symbols.
'''

import os
import wget
import csv
import json
import datetime
import os.path
import json
from pprint import pprint
from pymongo import MongoClient

#TODO FTSE, JAPAN, CHINA, SENSEX, HONGKONG, TOKYO, GERMAN, FRENCH
#How each one is affected by other markets

#Database Information
client = MongoClient('mongodb://localhost:27017')
db = client['Stocks']

#Symbol ticker list csvs
CSV_URL_LIST={
'AMEX' : 'http://www.nasdaq.com/screening/companies-by-industry.aspx?exchange=AMEX&render=download',
'NYSE' : 'http://www.nasdaq.com/screening/companies-by-industry.aspx?exchange=NYSE&render=download',
'NASDAQ' : 'http://www.nasdaq.com/screening/companies-by-industry.aspx?exchange=NASDAQ&render=download',
'TSX' : 'http://web.tmxmoney.com/constituents_data.php?index=^TSX&index_name=S%26P%2FTSX+Composite+Index'
}

#Need the official name for the syntax of the csvs downloaded
US_STYLE_INDICES = ['AMEX', 'NYSE', 'NASDAQ']

US_CSV_FIELDNAMES = ("Symbol", "Name", "LastSale", "MarketCap", "ADR TSO",
                    "IPOyear", "Sector", "Industry", "Summary Quote")

TORONTO_CSV_FIELDNAMES = ('Name', 'Symbol')

TODAY = datetime.date.today()

class Stocks:
    '''
    Get and classify the entire list
    '''
    def __init__(self):
        for each in US_STYLE_INDICES:
            if not os.path.isfile('%s_%s.json'%(TODAY, each)):
                self.get_us_symbol_list(each)

        if not os.path.isfile('%s_TSX.json'%TODAY):
            self.tsx_list = self.get_tsx_list()

        self.update_stock_symbols()

    def get_us_symbol_list(self, index):
        filename = wget.download(CSV_URL_LIST[index])
        csv_file = open(filename, 'rb')
        csv_list = csv_file.readlines()[1:]
        open(filename, 'wb').writelines(csv_list)
        with open(filename, 'rb') as csv_file:
            reader= csv.DictReader(csv_file, US_CSV_FIELDNAMES)
            out = json.dumps([ row for row in reader ], indent=4, sort_keys=True)
            with open('%s_%s.json' %(TODAY, index), 'wb') as json_file:
                json_file.write(out)
        print '\nFILENAME : %s \n '%filename
        os.system('rm %s' %filename)
        return out


    def get_tsx_list(self):
        filename = wget.download(CSV_URL_LIST['TSX'])
        tsx_csv = open(filename, 'rb')
        tsx_csv_list = tsx_csv.readlines()[5:]
        open(filename, 'wb').writelines(tsx_csv_list)
        with open(filename, 'rb') as tsx_csv:
            reader = csv.DictReader(tsx_csv, TORONTO_CSV_FIELDNAMES)
            out = json.dumps([row for row in reader], indent=4, sort_keys=True)
            with open('%s_TSX.json'%TODAY, 'wb') as tsx_json:
                tsx_json.write(out)
        print 'FILENAME : %s \n' %filename
        os.system('rm %s' %filename)
        return out


    def update_stock_symbols(self):
        for each in US_STYLE_INDICES:
            print each
            db['%sSymbols' %each].remove({})
            collection = db['%sSymbols' %each]
            self.add_symbols(collection, each)

        db['TsxSymbols'].remove({})
        collection = db['TsxSymbols']
        self.add_tsx_symbols(collection)


    def add_symbols(self, collection, index):
        with open('%s_%s.json' %(TODAY, index)) as sym_file:
            data = json.load(sym_file)
            print len(data)
            collection.insert([{'x': i} for i in range(len(data))])
            print collection.inserted_ids
            #pprint(data)


    def add_tsx_symbols(self, collection):
        with open('%s_TSX.json'%TODAY) as sym_file:
            data = json.load(sym_file)
            print len(data)
            collection.insert([{'x': i} for i in range(len(data))])
            print collection.inserted_ids
            collection.count()
            #pprint(data)


class Stock:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol


if __name__ == '__main__':
    stocks = Stocks()
